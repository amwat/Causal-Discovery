# biocLite("RBGL")
# biocLite("Rgraphviz")
require(vars)
require(urca)
require(pcalg)
# Read the input data
mydata <- read.csv("data.csv")
# Build a VAR model
criteria <- VARselect(mydata, lag.max = 10)
lagvalue <- criteria$selection["SC(n)"]
varmodel <- VAR(mydata, lagvalue)
# Select the lag order using the Schwarz Information Criterion with a maximum lag of 10
# see ?VARSelect to find the optimal number of lags and use it as input to VAR()
# Extract the residuals from the VAR model
# see ?residuals
res <- residuals(varmodel)
# Check for stationarity using the Augmented Dickey-Fuller test
# see ?ur.df
adf <- apply(res, 2, ur.df)
# Check whether the variables follow a Gaussian distribution
# see ?ks.test
ks <- ks.test(res, "pnorm")
# Write the residuals to a csv file to build causal graphs using Tetrad software
write.csv(res, "residuals.csv",row.names = FALSE)
# OR Run the PC and LiNGAM algorithm in R as follows,
# see ?pc and ?LINGAM
# PC Algorithm
suffStat = list(C = res, n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = T
)
plot(pcmodel)
# LiNGAM Algorithm
lingam(res, verbose = TRUE)
?rnorm
rnorm
rnorm()
rnorm(100)
shapiro.test(rnorm(100))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(10000))
shapiro.test(rnorm(5000))
shapiro.test(rnorm(100))
shapiro.test(rnorm(10))
shapiro.test(mydata[,"Move"])
shapiro.test(res[,"Move"])
shapiro.test(res[,"RPRICE"])
shapiro.test(mydata[,"RPRICE"])
shapiro.test(mydata[,"PRICE"])
shapiro.test(mydata[,"PMRICE"])
shapiro.test(mydata[,"MPRICE"])
shapiro.test(res[,"MPRICE"])
adf
ur.df(mydata[."Move"])
ur.df(mydata[,"Move"])
ur.df(mydata[,"RPRICE"])
ur.df(mydata[,"MPRICE"])
?adf.test
library(tseries)
adf.test(mydata)
adf.test(mydata[,"Move"])
adf.test(mydata[,"RPRICE"])
adf.test(mydata[,"MPRICE"])
adf.test(res[,"MPRICE"])
adf.test(res[,"MPRICE"])
adf.test(res[,"RPRICE"])
adf.test(res[,"Move"])
adf
ks <- ks.test(res, "pnorm")
ks
ks <- ks.test(res[,"Move"], "pnorm")
ks
ks <- ks.test(res[,"RPRICE"], "pnorm")
ks
ks <- ks.test(res[,"MPRICE"], "pnorm")
ks
ks <- ks.test(res, "pnorm")
ks.test(mydata, "pnorm")
ks.test(mydata["Move"], "pnorm")
ks.test(mydata[,"Move"], "pnorm")
ks.test(mydata[,"Rove"], "pnorm")
ks.test(mydata[,"RPRICE"], "pnorm")
ks.test(mydata[,"MPRICE"], "pnorm")
adf.test(res)
adf.test(mydata)
adf.test(mydata[,"Move"])
summary(adf)
summary(adf[1])
summary(adf[[1]])
summary(adf[[2]])
summary(adf[[3]])
suffStat = list(C = res, n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = T
)
plot(pcmodel)
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(res),
verbose = T
)
plot(pcmodel)
suffStat = list(C = res, n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.01,
labels = colnames(res),
verbose = T
)
plot(pcmodel
suffStat = list(C = res, n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = T
)
plot(pcmodel)
suffStat = list(C = res, n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.5,
labels = colnames(res),
verbose = T
)
plot(pcmodel)
# PC Algorithm
suffStat = list(C = res, n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 1,
labels = colnames(res),
verbose = T
)
plot(pcmodel)
# PC Algorithm
suffStat = list(C = res, n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = T
)
plot(pcmodel)
apply(adf,summary)
adf
apply(adf, 1, summary)
adf[1]
adf[,1]
adf[1,]
lapply(adf, summary)
ks <- apply(res,ks.test)#ks.test(res, "pnorm")
ks <- apply(res, 2, ks.test)#ks.test(res, "pnorm")
ks <- apply(res, 2, ks.test, "pnorm")#ks.test(res, "pnorm")
ks <- apply(res, 2, ks.test, "pnorm")
ks
# PC Algorithm
suffStat = list(C = res, n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = T
)
plot(pcmodel)
?pc
?gaussCItest
?p
?pc
suffStat = list(C = cor(res), n = nrow(res))
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = T
)
plot(pcmodel)
?pc
# PC Algorithm
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = T,
skel.method = "original"
)
plot(pcmodel)
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = T,
skel.method = "stable"
)
plot(pcmodel)
?pc
pcmodel.skel
pcmodel$skel
?pcorOrder
?pc
pcmodel@graph
pcmodel@n.edgetests
pcmodel
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = TRUE,
skel.method = "original"
)
plot(pcmodel)
summary(pcmodel)
pcmodel@sepset
pcmodel@pMax
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.01,
labels = colnames(res),
verbose = TRUE,
skel.method = "original"
)
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(res),
verbose = TRUE,
skel.method = "original"
)
plot(pcmodel)
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.01,
labels = colnames(res),
verbose = TRUE,
skel.method = "original"
)
plot(pcmodel)
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.01,
labels = colnames(res),
verbose = TRUE,
skel.method = "original"
)
plot(pcmodel)
# PC Algorithm
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = TRUE,
skel.method = "original"
)
plot(pcmodel)
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.098,
labels = colnames(res),
verbose = TRUE,
skel.method = "original"
)
plot(pcmodel)
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = TRUE,
skel.method = "original"
)
plot(pcmodel)
# Load the libraries
# To install pcalg library you may first need to execute the following commands:
# source("https://bioconductor.org/biocLite.R")
# biocLite("graph")
# biocLite("RBGL")
# biocLite("Rgraphviz")
require(vars)
require(urca)
require(pcalg)
# Read the input data
mydata <- read.csv("data.csv")
# Build a VAR model
criteria <- VARselect(mydata, lag.max = 10)
lagvalue <- criteria$selection["SC(n)"]
varmodel <- VAR(mydata, lagvalue)
# Select the lag order using the Schwarz Information Criterion with a maximum lag of 10
# see ?VARSelect to find the optimal number of lags and use it as input to VAR()
# Extract the residuals from the VAR model
# see ?residuals
res <- residuals(varmodel)
# Check for stationarity using the Augmented Dickey-Fuller test
# see ?ur.df
adf <- apply(res, 2, ur.df)
lapply(adf, summary)
# Check whether the variables follow a Gaussian distribution
# see ?ks.test
ks <- apply(res, 2, ks.test, "pnorm")
# Write the residuals to a csv file to build causal graphs using Tetrad software
write.csv(res, "residuals.csv", row.names = FALSE)
# OR Run the PC and LiNGAM algorithm in R as follows,
# see ?pc and ?LINGAM
# PC Algorithm
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = TRUE,
skel.method = "original"
)
plot(pcmodel)
# LiNGAM Algorithm
lingam(res, verbose = TRUE)
# Load the libraries
# To install pcalg library you may first need to execute the following commands:
# source("https://bioconductor.org/biocLite.R")
biocLite("graph")
biocLite("RBGL")
biocLite("Rgraphviz")
require(vars)
require(urca)
require(pcalg)
# Read the input data
mydata <- read.csv("data.csv")
# Build a VAR model
criteria <- VARselect(mydata, lag.max = 10)
lagvalue <- criteria$selection["SC(n)"]
varmodel <- VAR(mydata, lagvalue)
# Select the lag order using the Schwarz Information Criterion with a maximum lag of 10
# see ?VARSelect to find the optimal number of lags and use it as input to VAR()
# Extract the residuals from the VAR model
# see ?residuals
res <- residuals(varmodel)
# Check for stationarity using the Augmented Dickey-Fuller test
# see ?ur.df
adf <- apply(res, 2, ur.df)
lapply(adf, summary)
# Check whether the variables follow a Gaussian distribution
# see ?ks.test
ks <- apply(res, 2, ks.test, "pnorm")
# Write the residuals to a csv file to build causal graphs using Tetrad software
write.csv(res, "residuals.csv", row.names = FALSE)
# OR Run the PC and LiNGAM algorithm in R as follows,
# see ?pc and ?LINGAM
# PC Algorithm
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = TRUE,
skel.method = "original"
)
plot(pcmodel)
# LiNGAM Algorithm
lingam(res, verbose = TRUE)
# Load the libraries
# To install pcalg library you may first need to execute the following commands:
# source("https://bioconductor.org/biocLite.R")
biocLite("graph")
biocLite("RBGL")
biocLite("Rgraphviz")
require(vars)
require(urca)
require(pcalg)
# Read the input data
mydata <- read.csv("data.csv")
# Build a VAR model
criteria <- VARselect(mydata, lag.max = 10)
lagvalue <- criteria$selection["SC(n)"]
varmodel <- VAR(mydata, lagvalue)
# Select the lag order using the Schwarz Information Criterion with a maximum lag of 10
# see ?VARSelect to find the optimal number of lags and use it as input to VAR()
# Extract the residuals from the VAR model
# see ?residuals
res <- residuals(varmodel)
# Check for stationarity using the Augmented Dickey-Fuller test
# see ?ur.df
adf <- apply(res, 2, ur.df)
lapply(adf, summary)
# Check whether the variables follow a Gaussian distribution
# see ?ks.test
ks <- apply(res, 2, ks.test, "pnorm")
# Write the residuals to a csv file to build causal graphs using Tetrad software
write.csv(res, "residuals.csv", row.names = FALSE)
# OR Run the PC and LiNGAM algorithm in R as follows,
# see ?pc and ?LINGAM
# PC Algorithm
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = TRUE,
skel.method = "original"
)
plot(pcmodel)
# LiNGAM Algorithm
lingam(res, verbose = TRUE)
# Load the libraries
# To install pcalg library you may first need to execute the following commands:
source("https://bioconductor.org/biocLite.R")
biocLite("graph")
# Load the libraries
# To install pcalg library you may first need to execute the following commands:
source("https://bioconductor.org/biocLite.R")
biocLite("graph")
biocLite("RBGL")
biocLite("Rgraphviz")
require(vars)
require(urca)
require(pcalg)
# Read the input data
mydata <- read.csv("data.csv")
# Build a VAR model
criteria <- VARselect(mydata, lag.max = 10)
lagvalue <- criteria$selection["SC(n)"]
varmodel <- VAR(mydata, lagvalue)
# Select the lag order using the Schwarz Information Criterion with a maximum lag of 10
# see ?VARSelect to find the optimal number of lags and use it as input to VAR()
# Extract the residuals from the VAR model
# see ?residuals
res <- residuals(varmodel)
# Check for stationarity using the Augmented Dickey-Fuller test
# see ?ur.df
adf <- apply(res, 2, ur.df)
lapply(adf, summary)
# Check whether the variables follow a Gaussian distribution
# see ?ks.test
ks <- apply(res, 2, ks.test, "pnorm")
# Write the residuals to a csv file to build causal graphs using Tetrad software
write.csv(res, "residuals.csv", row.names = FALSE)
# OR Run the PC and LiNGAM algorithm in R as follows,
# see ?pc and ?LINGAM
# PC Algorithm
suffStat = list(C = cor(res), n = nrow(res))
pcmodel <-
pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.1,
labels = colnames(res),
verbose = TRUE,
skel.method = "original"
)
plot(pcmodel)
# LiNGAM Algorithm
lingam(res, verbose = TRUE)
